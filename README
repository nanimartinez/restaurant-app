Restaurant API

Esta es una API RESTful robusta y escalable para una aplicaci√≥n de gesti√≥n de restaurantes. Permite manejar usuarios, restaurantes, men√∫s, pedidos y autenticaci√≥n, todo empaquetado en una arquitectura de software limpia y testeada. El proyecto est√° completamente dockerizado y listo para desplegarse.

![alt text](https://img.shields.io/docker/pulls/nanimartinez/nanimartinez-restaurant-app.svg)

‚ú® Caracter√≠sticas Principales

Gesti√≥n de Usuarios: Operaciones CRUD completas para usuarios y subida de documentos.

Gesti√≥n de Restaurantes: Creaci√≥n, lectura, actualizaci√≥n y eliminaci√≥n de restaurantes.

Gesti√≥n de Men√∫: Manejo de √≠tems del men√∫, incluyendo la carga de im√°genes.

Sistema de Pedidos: Flujo completo para crear, visualizar y actualizar el estado de los pedidos.

Autenticaci√≥n y Seguridad: Registro y login basados en JSON Web Tokens (JWT) con cookies.

Arquitectura por Capas: Separaci√≥n de responsabilidades (Controladores, Servicios, Repositorios, DAO) para un mantenimiento sencillo y escalabilidad.

Mocking de Datos: Endpoints para generar datos de prueba masivos para usuarios y restaurantes.

Documentaci√≥n de API: Documentaci√≥n completa y funcional generada con Swagger.

Logging Avanzado: Sistema de logs con Winston, con diferentes niveles y salidas para desarrollo y producci√≥n.

Testing Integral: Cobertura de pruebas funcionales para todos los endpoints con Mocha, Chai y Supertest.

Contenerizaci√≥n: Completamente dockerizado para un despliegue f√°cil, consistente y aislado.

üõ†Ô∏è Tecnolog√≠as Utilizadas

Backend: Node.js, Express.js

Base de Datos: MongoDB con Mongoose

Autenticaci√≥n: JSON Web Token (JWT), bcrypt

Testing: Mocha, Chai, Supertest

Contenerizaci√≥n: Docker, Docker Compose

Documentaci√≥n: Swagger (OpenAPI)

Otros: Winston (logging), Faker.js (mocking), Multer (file uploads), Dotenv

üìÇ Estructura del Proyecto

El proyecto sigue una arquitectura por capas para mantener el c√≥digo organizado y desacoplado:

Generated code
‚îî‚îÄ‚îÄ nanimartinez-restaurant-app/
    ‚îú‚îÄ‚îÄ Dockerfile            # Define la imagen Docker de la aplicaci√≥n.
    ‚îú‚îÄ‚îÄ .dockerignore         # Especifica archivos a ignorar por Docker.
    ‚îú‚îÄ‚îÄ package.json          # Dependencias y scripts del proyecto.
    ‚îú‚îÄ‚îÄ server.js             # Punto de entrada del servidor.
    ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îú‚îÄ‚îÄ app.js            # Configuraci√≥n principal de la app Express.
    ‚îÇ   ‚îú‚îÄ‚îÄ config/           # Configuraciones (DB, logger, swagger, etc.).
    ‚îÇ   ‚îú‚îÄ‚îÄ controllers/      # L√≥gica de manejo de peticiones (req, res).
    ‚îÇ   ‚îú‚îÄ‚îÄ dao/              # Data Access Objects - Interacci√≥n directa con la DB.
    ‚îÇ   ‚îú‚îÄ‚îÄ docs/             # Archivos YAML para la documentaci√≥n Swagger.
    ‚îÇ   ‚îú‚îÄ‚îÄ dto/              # Data Transfer Objects - Estructuras de datos limpias.
    ‚îÇ   ‚îú‚îÄ‚îÄ repository/       # Abstracci√≥n sobre el DAO.
    ‚îÇ   ‚îú‚îÄ‚îÄ routers/          # Definici√≥n de las rutas de la API.
    ‚îÇ   ‚îú‚îÄ‚îÄ services/         # L√≥gica de negocio principal.
    ‚îÇ   ‚îî‚îÄ‚îÄ utils/            # Funciones de utilidad (hasher, uploader, etc.).
    ‚îî‚îÄ‚îÄ test/                 # Pruebas funcionales para los endpoints.

üöÄ Instalaci√≥n y Puesta en Marcha

Sigue estos pasos para ejecutar el proyecto en tu m√°quina local.

Prerrequisitos

Node.js (v20 o superior)

npm

MongoDB

Docker (recomendado)

1. Clonar el Repositorio
Generated bash
git clone <URL_DEL_REPOSITORIO>
cd nanimartinez-restaurant-app
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
2. Instalar Dependencias
Generated bash
npm install
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
3. Configurar Variables de Entorno

El proyecto utiliza archivos .env para gestionar las variables de entorno seg√∫n el modo de ejecuci√≥n (dev, prod, test). Crea los siguientes archivos en la ra√≠z del proyecto:

.env.dev (para desarrollo)

Generated ini
PORT=8080
MONGO_URI=mongodb://localhost:27017/restaurant-dev
JWT_SECRET_KEY=tu_clave_secreta_para_jwt
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Ini
IGNORE_WHEN_COPYING_END

.env.test (para pruebas)

Generated ini
PORT=8081
MONGO_URI=mongodb://localhost:27017/restaurant-test
JWT_SECRET_KEY=tu_clave_secreta_para_testing
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Ini
IGNORE_WHEN_COPYING_END

.env.prod (para producci√≥n)

Generated ini
PORT=8080
MONGO_URI=mongodb+srv://<user>:<password>@<cluster-url>/restaurant-prod?retryWrites=true&w=majority
JWT_SECRET_KEY=una_clave_mucho_mas_segura_y_larga
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Ini
IGNORE_WHEN_COPYING_END
4. Ejecutar la Aplicaci√≥n

Puedes iniciar el servidor en diferentes modos:

Modo Desarrollo (con Nodemon):

Generated bash
npm run dev
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END

Modo Producci√≥n:

Generated bash
npm start -- --mode prod
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
üß™ Ejecutar los Tests

Para correr la suite de pruebas funcionales, aseg√∫rate de que el servidor no est√© corriendo en el puerto definido en test/.env.test (8081). Luego, ejecuta:

Generated bash
# Nota: aseg√∫rate de que tu package.json tenga un script de test adecuado
# Ejemplo de script en package.json:
# "test": "mocha --require test/setup.js --timeout 10000 --exit test/**/*.test.js"

npm test
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
üìö Documentaci√≥n de la API (Swagger)

Una vez que el servidor est√© en funcionamiento, puedes acceder a la documentaci√≥n interactiva de la API en tu navegador:

http://localhost:8080/api-docs

üé≠ Endpoints de Mocking

Hay dos endpoints disponibles para generar datos de prueba.

Generar Usuarios Falsos (sin guardar en DB):
Retorna un JSON con 50 usuarios generados con Faker.js.
GET /api/mocks/mockingusers

Generar y Guardar Datos en la DB:
Crea y guarda en la base de datos la cantidad de usuarios y restaurantes que especifiques como query params.
POST /api/mocks/generateData?users=25&resto=8

üê≥ Uso con Docker

El proyecto est√° completamente dockerizado, lo que facilita su despliegue y ejecuci√≥n en cualquier entorno.

Construir la Imagen

Para construir la imagen de Docker localmente, ejecuta el siguiente comando en la ra√≠z del proyecto:

Generated bash
docker build -t nanimartinez-restaurant-app .
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END
Ejecutar desde la Imagen Local

Para correr un contenedor a partir de la imagen que acabas de construir:

Generated bash
docker run -p 8080:8080 --name restaurant-container --env-file ./.env.prod -d nanimartinez-restaurant-app
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END

-p 8080:8080: Mapea el puerto 8080 de tu m√°quina al puerto 8080 del contenedor.

--name restaurant-container: Asigna un nombre al contenedor.

--env-file ./.env.prod: Carga las variables de entorno desde tu archivo .env.prod.

-d: Ejecuta el contenedor en modo "detached" (en segundo plano).

Ejecutar desde Docker Hub

La imagen tambi√©n est√° disponible p√∫blicamente en Docker Hub. Puedes descargarla y ejecutarla con un solo comando:

Generated bash
docker run -p 8080:8080 --name restaurant-container --env-file ./.env.prod -d nanimartinez/nanimartinez-restaurant-app:latest
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Bash
IGNORE_WHEN_COPYING_END