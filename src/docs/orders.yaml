paths:
  /api/orders:
    get:
      summary: Obtener todos los pedidos
      tags:
        - Orders
      responses:
        "200":
          description: Una lista de todos los pedidos realizados
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        "500":
          description: Error interno del servidor

    post:
      summary: Crear un nuevo pedido
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        "200":
          description: Pedido creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOrder'
        "400":
          description: Datos incompletos o inválidos
        "404":
          description: Usuario, restaurante o platillo no encontrado
        "500":
          description: Error interno del servidor

  /api/orders/{oid}:
    parameters:
      - in: path
        name: oid
        required: true
        schema:
          type: string
        description: ID del pedido a gestionar

    get:
      summary: Obtener un pedido por su ID
      tags:
        - Orders
      responses:
        "200":
          description: Detalles del pedido solicitado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOrder'
        "404":
          description: Pedido no encontrado

    patch:
      summary: Actualizar el estado de un pedido
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: ["preparing", "completed", "cancelled"]
                  example: "preparing"
      responses:
        "200":
          description: Estado del pedido actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: "Order status updated"
        "400":
          description: Estado inválido
        "404":
          description: Pedido no encontrado

components:
  schemas:
    Order:
      type: object
      properties:
        _id:
          type: string
          example: "648f1d1d1e8a9d1b2c3d4e7b"
        user:
          $ref: '#/components/schemas/User'
        restaurant:
          $ref: '#/components/schemas/Restaurant'
        items:
          type: array
          items:
            type: object
            properties:
              menuItem:
                $ref: '#/components/schemas/MenuItem'
              quantity:
                type: integer
                example: 2
              price:
                type: number
                description: Precio del platillo en el momento de la compra
                example: 8.99
        totalPrice:
          type: number
          example: 17.98
        status:
          type: string
          enum: ["pending", "preparing", "completed", "cancelled"]
          example: "pending"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    NewOrder:
      type: object
      required:
        - userId
        - restaurantId
        - items
      properties:
        userId:
          type: string
          example: "647fa8c9e46dbc5a20320181"
        restaurantId:
          type: string
          example: "648f1b3b1e8a9d1b2c3d4e5f"
        items:
          type: array
          items:
            type: object
            required:
              - menuItemId
              - quantity
            properties:
              menuItemId:
                type: string
                example: "648f1c1c1e8a9d1b2c3d4e6a"
              quantity:
                type: integer
                example: 2
    
    ResponseOrder:
      type: object
      properties:
        status:
          type: string
          example: success
        payload:
          $ref: '#/components/schemas/Order'